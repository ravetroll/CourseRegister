@page "/Admin/Users"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Linq

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Manage Users</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    <MudText Typo="Typo.h5" GutterBottom="true">User Management</MudText>
    
    <MudTable T="ApplicationUser" Items="Users" Dense="true" Hover="true" Bordered="true" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Existing Users</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>User</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Roles</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="User">@context.UserName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Roles">
               <MudChipSet T="string">
                   @if (UserRoles.TryGetValue(context.Id, out var roles))
                   {
                       @foreach (var role in roles)
                       {
                           <MudChip Text="@role" />
                       }
                   }
                </MudChipSet>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Info" 
                               OnClick="@(() => EditUserRoles(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudContainer>

<MudDialog @bind-Visible="isDialogOpen" Style="min-width: 400px;">
    <TitleContent>
        <MudText Typo="Typo.h6">Edit Roles for @currentUser?.Email</MudText>
    </TitleContent>
    <DialogContent>
        <MudList T="IdentityRole">
            @foreach (var role in AllRoles)
            {
                <MudListItem>
                    <MudCheckBox T="bool" 
                                 Value="selectedRoles.Contains(role.Name!)"                                 
                                 ValueChanged="@((isChecked) => ToggleRole(role.Name!, isChecked))"
                                 Color="Color.Primary"
                                 Label="@role.Name" />
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="SaveRolesAsync" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private IEnumerable<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    private Dictionary<string, IList<string>> UserRoles { get; set; } = new();
    private List<IdentityRole> AllRoles { get; set; } = new List<IdentityRole>();
    private ApplicationUser? currentUser;
    private bool isDialogOpen = false;
    private List<string> selectedRoles = new();
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        Users = UserManager.Users.ToList();
        AllRoles = RoleManager.Roles.ToList();

        UserRoles.Clear();
        foreach (var user in Users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            UserRoles.Add(user.Id, roles);
        }
    }
    
    private void EditUserRoles(ApplicationUser user)
    {
        currentUser = user;
        // Load current roles for the user and prepare for the dialog
        selectedRoles = UserRoles.TryGetValue(user.Id, out var roles) ? roles.ToList() : new List<string>();
        isDialogOpen = true;
    }
    
    private void CloseDialog()
    {
        isDialogOpen = false;
    }

    private void ToggleRole(string roleName, bool isChecked)
    {
        if (isChecked && !selectedRoles.Contains(roleName))
        {
            selectedRoles.Add(roleName);
        }
        else if (!isChecked && selectedRoles.Contains(roleName))
        {
            selectedRoles.Remove(roleName);
        }
    }
    
    private async Task SaveRolesAsync()
    {
        if (currentUser == null) return;
    
        var currentRoles = await UserManager.GetRolesAsync(currentUser);
    
        // Add roles that were selected but not currently assigned
        var rolesToAdd = selectedRoles.Except(currentRoles);
        foreach (var role in rolesToAdd)
        {
            await UserManager.AddToRoleAsync(currentUser, role);
        }
    
        // Remove roles that are currently assigned but not selected
        var rolesToRemove = currentRoles.Except(selectedRoles);
        foreach (var role in rolesToRemove)
        {
            await UserManager.RemoveFromRoleAsync(currentUser, role);
        }
    
        isDialogOpen = false;
        await LoadDataAsync(); // Refresh the table to show the changes
    }
}
