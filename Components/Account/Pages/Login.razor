@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using CourseRegisterApp.Components.Account
@using CourseRegisterApp.CourseData
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using Microsoft.EntityFrameworkCore

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Log in</PageTitle>


<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center my-12">
    <MudPaper Elevation="25" Class="pa-8" Width="100%">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Autocomplete="username"
                                  @bind-Value="Input.Email"
                                  For="() => Input.Email"
                                  Name="Input.Email" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="current-password"
                                  @bind-Value="Input.Password"
                                  For="() => Input.Password"
                                  Name="Input.Password" />
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <MudCheckBox T="bool" 
                                 @bind-Value="Input.RememberMe"
                                 Label="Remember me?"
                                 Color="Color.Primary"></MudCheckBox>
                    <MudLink Href="/Account/ForgotPassword">Forgot your password?</MudLink>
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true"
                               Class="mt-2">Log in</MudButton>
                </MudItem>
                <div class="d-flex justify-center mt-4">
                    <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink>
                    <MudText>&nbsp;|&nbsp;</MudText>
                    <MudLink Href="/Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
                </div>
            </EditForm>
        </section>
   
        <section class="mt-8">
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Use another service to log in.</MudText>
            <MudDivider Class="my-2" />
            <ExternalLoginPicker />
        </section>
    </MudPaper>
</MudContainer>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }
}
