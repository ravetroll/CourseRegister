@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using CourseRegisterApp.Components.Account
@using CourseRegisterApp.CourseData
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CourseRegisterApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@inject CourseRegisterContext CourseRegisterContext

<PageTitle>Register</PageTitle>
<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center my-12">
    <MudPaper Elevation="25" Class="pa-8" Width="100%">
<MudText Typo="Typo.h1" Class="mb-4">Register</MudText>
<MudGrid>
    <MudItem xs="12" sm="6">
        <StatusMessage Message="@Message" />
    </MudItem>
</MudGrid>    
<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
            <MudText Typo="Typo.h5">Create a new account.</MudText>
            <MudDivider Class="my-4" />

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Input.Email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  Name="Input.Email"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Required="true"
                                  RequiredError="Email is required!"
                                  For="() => Input.Email" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Input.Password"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Name="Input.Password"
                                  Required="true"
                                  RequiredError="Password is required!"
                                  For="() => Input.Password" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Input.ConfirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Name="Input.Password"
                                  Required="true"
                                  RequiredError="Confirm Password is required!"
                                  For="() => Input.ConfirmPassword" />
                </MudItem>
            </MudGrid>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                Register
            </MudButton>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>
</MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        var adminUsers = await UserManager.GetUsersInRoleAsync("Admin");
        if (adminUsers.Count == 0)
        {
            user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                // Assign the "Admin" role to the first user to log in
                await UserManager.AddToRoleAsync(user, "Admin");
            }
        }
        else
        {
            await UserManager.AddToRoleAsync(user, "Student");
        }
        var alreadyRegistered = await CourseRegisterContext.Users.AnyAsync(u => u.Email == Input.Email);
        if (!alreadyRegistered)
        {
            User user1 = new()
            {
                Email = Input.Email,

            };
            CourseRegisterContext.Users.Add(user1);
            await CourseRegisterContext.SaveChangesAsync();


        }
       
        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);        
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
