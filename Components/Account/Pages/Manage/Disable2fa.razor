@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

<PageTitle>Disable two-factor authentication (2FA)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center text-center">
    <MudText Typo="Typo.h3" GutterBottom="true">Disable two-factor authentication (2FA)</MudText>

    <MudAlert Severity="Severity.Warning" Class="my-4">
        <MudText Typo="Typo.body1" Style="font-weight: bold;">
            This action only disables 2FA.
        </MudText>
        <MudText Class="mt-2">
            Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
            used in an authenticator app you should <MudLink Href="Account/Manage/ResetAuthenticator">reset your authenticator keys.</MudLink>
        </MudText>
    </MudAlert>

    <MudForm @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
        <MudStack Spacing="4">
            <AntiforgeryToken />
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Size="Size.Large"
                       FullWidth="true">
                Disable 2FA
            </MudButton>
        </MudStack>
    </MudForm>
</MudContainer>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(user))
        {
            throw new InvalidOperationException("Cannot disable 2FA for user as it's not currently enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            "2fa has been disabled. You can reenable 2fa when you setup an authenticator app",
            HttpContext);
    }
}