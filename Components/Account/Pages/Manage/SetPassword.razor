@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using CourseRegisterApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="my-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Set your password</MudText>
    <StatusMessage Message="@message" />
    <MudText Typo="Typo.body1" Class="text-info my-4">
        You do not have a local username/password for this site. Add a local
        account so you can log in without an external login.
    </MudText>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" md="10">
            <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <MudTextField T="string"
                              @bind-Value="Input.NewPassword"
                              Label="New password"
                              For="@(() => Input.NewPassword)"
                              InputType="InputType.Password"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.VpnKey"
                              AdornmentColor="Color.Info"
                              Variant="Variant.Filled"
                              Margin="Margin.Normal"
                              Autocomplete="new-password" />
                <MudTextField T="string"
                              @bind-Value="Input.ConfirmPassword"
                              Label="Confirm password"
                              For="@(() => Input.ConfirmPassword)"
                              InputType="InputType.Password"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.VpnKey"
                              AdornmentColor="Color.Info"
                              Variant="Variant.Filled"
                              Margin="Margin.Normal"
                              Autocomplete="new-password" />
                <div class="mt-4">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Size="Size.Large">
                        Set password
                    </MudButton>
                </div>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
