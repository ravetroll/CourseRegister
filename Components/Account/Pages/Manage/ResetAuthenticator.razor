@page "/Account/Manage/ResetAuthenticator"

@using CourseRegisterApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset authenticator key</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="my-4">
    <StatusMessage />
    <MudText Typo="Typo.h5" GutterBottom="true">Reset authenticator key</MudText>
    <MudAlert Severity="Severity.Warning" Class="my-4" Icon="@Icons.Material.Filled.Warning">
        <MudText Typo="Typo.body1" Class="font-weight-bold">
            If you reset your authenticator key your authenticator app will not work until you reconfigure it.
        </MudText>
        <MudText Class="mt-2">
            This process disables 2FA until you verify your authenticator app.
            If you do not complete your authenticator app configuration you may lose access to your account.
        </MudText>
    </MudAlert>
    <div>
        <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       FullWidth="true"
                       Size="Size.Large">
                Reset authenticator key
            </MudButton>
        </form>
    </div>
</MudContainer>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
            HttpContext);
    }
}