@page "/Admin/Roles"

@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Linq

@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Manage Roles</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    <MudText Typo="Typo.h5" GutterBottom="true">Role Management</MudText>

    <MudCard Elevation="2">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Create New Role</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="NewRole" OnValidSubmit="CreateRoleAsync" FormName="create-role">
                <DataAnnotationsValidator />
                <MudTextField @bind-Value="NewRole.RoleName"
                              For="@(() => NewRole.RoleName)"
                              Label="Role Name"
                              Variant="Variant.Outlined" />
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-4">
                    Create Role
                </MudButton>
            </EditForm>
            <MudAlert Severity="Severity.Success" Visible="!string.IsNullOrWhiteSpace(StatusMessage)" Class="my-2">@StatusMessage</MudAlert>
        </MudCardContent>
    </MudCard>

    <MudTable T="IdentityRole" Items="Roles" Dense="true" Hover="true" Bordered="true" Striped="true" Class="mt-8">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Existing Roles</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="SeedRolesAsync">
                Seed Default Roles
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Role Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Role Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           Size="Size.Small"
                           OnClick="@(() => DeleteRoleAsync(context.Id))">
                    Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private IEnumerable<IdentityRole> Roles = Enumerable.Empty<IdentityRole>();
    private string? StatusMessage;

    [SupplyParameterFromForm]
    private RoleModel NewRole { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
    }

    private async Task LoadRolesAsync()
    {
        Roles = RoleManager.Roles.ToList();
    }

    private async Task SeedRolesAsync()
    {
        var rolesToSeed = new List<string> { "Admin", "Manager", "User" };
        foreach (var roleName in rolesToSeed)
        {
            if (!await RoleManager.RoleExistsAsync(roleName))
            {
                var role = new IdentityRole(roleName);
                await RoleManager.CreateAsync(role);
            }
        }
        await LoadRolesAsync();
        StatusMessage = "Default roles seeded successfully.";
    }

    private async Task CreateRoleAsync()
    {
        var roleExists = await RoleManager.RoleExistsAsync(NewRole.RoleName!);
        if (roleExists)
        {
            StatusMessage = $"Error: Role '{NewRole.RoleName}' already exists.";
        }
        else
        {
            var result = await RoleManager.CreateAsync(new IdentityRole(NewRole.RoleName!));
            if (result.Succeeded)
            {
                await LoadRolesAsync();
                StatusMessage = $"Role '{NewRole.RoleName}' created successfully.";
            }
            else
            {
                StatusMessage = $"Error: Failed to create role. {string.Join(", ", result.Errors.Select(e => e.Description))}";
            }
        }
    }

    private async Task DeleteRoleAsync(string roleId)
    {
        var role = await RoleManager.FindByIdAsync(roleId);
        if (role != null)
        {
            // You can also add logic to check if a role can be deleted
            var result = await RoleManager.DeleteAsync(role);
            if (result.Succeeded)
            {
                await LoadRolesAsync();
                StatusMessage = $"Role '{role.Name}' deleted successfully.";
            }
            else
            {
                StatusMessage = $"Error: Failed to delete role. {string.Join(", ", result.Errors.Select(e => e.Description))}";
            }
        }
    }

    private sealed class RoleModel
    {
        [Required]
        public string? RoleName { get; set; }
    }
}
