@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>
<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6">
<MudText Typo="Typo.h3" GutterBottom="true">Manage email</MudText>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Info" Class="mb-4">@message</MudAlert>
}
</MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6">
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <MudCard>
                <MudCardContent>
                    <DataAnnotationsValidator />
                    

                    @if (isEmailConfirmed)
                    {
                        <MudTextField @bind-Value="email"
                                      Label="Email"
                                      Variant="Variant.Filled"
                                      Disabled="true"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.CheckCircle"
                                      AdornmentColor="Color.Success" />
                    }
                    else
                    {
                        <MudTextField @bind-Value="email"
                                      Label="Email"
                                      Variant="Variant.Filled"
                                      Disabled="true"
                                      Adornment="Adornment.End"
                                      AdornmentText="Not Confirmed"
                                      AdornmentColor="Color.Warning">
                            <MudTooltip Text="Send verification email">
                                <MudButton OnClick="OnSendEmailVerificationAsync"
                                           Color="Color.Warning"
                                           Variant="Variant.Text"
                                           Size="Size.Small"
                                           Style="text-transform: none;">
                                    Send verification
                                </MudButton>
                            </MudTooltip>
                        </MudTextField>
                    }
                    
                    <MudTextField @bind-Value="Input.NewEmail"
                                  For="() => Input.NewEmail"
                                  Name="Input.NewEmail"
                                  Label="New email"
                                  Variant="Variant.Text"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  AdornmentColor="Color.Primary"
                                  Margin="Margin.Normal" />
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center pa-4">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true">
                        Change email
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}