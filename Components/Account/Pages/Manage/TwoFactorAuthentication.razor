@page "/Account/Manage/TwoFactorAuthentication"

@using CourseRegisterApp.Components.Account
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="my-4">
    <StatusMessage />
    <MudText Typo="Typo.h5" GutterBottom="true">Two-factor authentication (2FA)</MudText>

    @if (canTrack)
    {
        @if (is2faEnabled)
        {
            @if (recoveryCodesLeft == 0)
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    <MudText Typo="Typo.body1" Class="font-weight-bold">
                        You have no recovery codes left.
                    </MudText>
                    <MudText>
                        You must <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink> before you can log in with a recovery code.
                    </MudText>
                </MudAlert>
            }
            else if (recoveryCodesLeft == 1)
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    <MudText Typo="Typo.body1" Class="font-weight-bold">
                        You have 1 recovery code left.
                    </MudText>
                    <MudText>
                        You can <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.
                    </MudText>
                </MudAlert>
            }
            else if (recoveryCodesLeft <= 3)
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4">
                    <MudText Typo="Typo.body1" Class="font-weight-bold">
                        You have @recoveryCodesLeft recovery codes left.
                    </MudText>
                    <MudText>
                        You should <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.
                    </MudText>
                </MudAlert>
            }

            <MudStack Row="true" Class="mt-4">
                @if (isMachineRemembered)
                {
                    <form @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                        <AntiforgeryToken />
                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary">
                            Forget this browser
                        </MudButton>
                    </form>
                }
                <MudButton Href="Account/Manage/Disable2fa"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Disable 2FA
                </MudButton>
                <MudButton Href="Account/Manage/GenerateRecoveryCodes"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Reset recovery codes
                </MudButton>
            </MudStack>
        }

        <MudText Typo="Typo.h6" Class="mt-8">Authenticator app</MudText>
        @if (!hasAuthenticator)
        {
            <MudButton Href="Account/Manage/EnableAuthenticator"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-2">
                Add authenticator app
            </MudButton>
        }
        else
        {
            <MudStack Row="true" Class="mt-2">
                <MudButton Href="Account/Manage/EnableAuthenticator"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Set up authenticator app
                </MudButton>
                <MudButton Href="Account/Manage/ResetAuthenticator"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Reset authenticator app
                </MudButton>
            </MudStack>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Error" Class="my-4">
            <MudText Typo="Typo.body1" Class="font-weight-bold">
                Privacy and cookie policy have not been accepted.
            </MudText>
            <MudText>
                You must accept the policy before you can enable two factor authentication.
            </MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }
}
