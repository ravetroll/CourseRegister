@page "/Account/Manage/ChangePassword"


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject ISnackbar Snackbar
<PageTitle>Change password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center my-12">
    <MudPaper Elevation="25" Class="pa-8" Width="100%">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">Change Password</MudText>
            <MudDivider Class="my-2" />
            
            @if (!string.IsNullOrEmpty(message))
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">
                    @message
                </MudAlert>
            }

            @if (identityErrors is not null && identityErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">
                    <MudList T="IdentityError" DisablePadding="true">
                        @foreach (var error in identityErrors)
                        {
                            <MudListItem>
                                @error.Description
                            </MudListItem>
                        }
                    </MudList>
                </MudAlert>
            }
            
            <MudGrid Class="mt-4">
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Old Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="current-password"
                                  @bind-Value="Input.OldPassword"
                                  For="() => Input.OldPassword"
                                  Name="Input.OldPassword" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="New Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="new-password"
                                  @bind-Value="Input.NewPassword"
                                  For="() => Input.NewPassword"
                                  Name="Input.NewPassword" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Confirm New Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="new-password"
                                  @bind-Value="Input.ConfirmPassword"
                                  For="() => Input.ConfirmPassword"
                                  Name="Input.ConfirmPassword" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               Size="Size.Large"
                               FullWidth="true"
                               Class="mt-2">Update password</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    public string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;
    private IEnumerable<IdentityError>? identityErrors;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            identityErrors = changePasswordResult.Errors;
            message = $"Error: {string.Join(", ", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }
        Snackbar.Add("Your password has been changed.", Severity.Success);
        await InvokeAsync(StateHasChanged);
        await Task.Delay(4000);
        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");
       
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
