@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column align-center text-center">
    <MudText Typo="Typo.h3" GutterBottom="true">Register Confirmation</MudText>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@statusMessage</MudAlert>
    }

    @if (emailConfirmationLink is not null)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            <MudText>
                This app does not currently have a real email sender registered. See <MudLink Href="https://aka.ms/aspaccountconf" Target="_blank">these docs</MudLink> for how to configure a real email sender.
                <br />
                Normally this would be emailed: <MudButton Href="@emailConfirmationLink" Color="Color.Secondary">Confirm Account</MudButton>
            </MudText>
        </MudAlert>
    }
    else
    {
        <MudAlert Severity="Severity.Success" Class="my-4">
            <MudText>
                Please check your email to confirm your account.
            </MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}