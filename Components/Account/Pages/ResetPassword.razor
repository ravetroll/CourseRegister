@page "/Account/ResetPassword"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CourseRegisterApp.Data
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web

@inject IdentityRedirectManager RedirectManager
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center my-12">
    <MudPaper Elevation="25" Class="pa-8" Width="100%">
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">Reset Password</MudText>
            <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mb-8">Reset your password.</MudText>
            <MudDivider Class="my-2" />
            
            @if (!string.IsNullOrEmpty(Message))
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">
                    @Message
                </MudAlert>
            }

            @if (identityErrors is not null && identityErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">
                    <MudList T="IdentityError" DisablePadding="true">
                        @foreach (var error in identityErrors)
                        {
                            <MudListItem>
                                @error.Description
                            </MudListItem>
                        }
                    </MudList>
                </MudAlert>
            }
            
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            
            <MudGrid Class="mt-4">
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Autocomplete="username"
                                  @bind-Value="Input.Email"
                                  For="() => Input.Email"
                                  Name="Input.Email" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="new-password"
                                  @bind-Value="Input.Password"
                                  For="() => Input.Password"
                                  Name="Input.Password" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Autocomplete="new-password"
                                  @bind-Value="Input.ConfirmPassword"
                                  For="() => Input.ConfirmPassword"
                                  Name="Input.ConfirmPassword" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               Size="Size.Large"
                               FullWidth="true"
                               Class="mt-2">Reset</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            Navigation.NavigateTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            Navigation.NavigateTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            Navigation.NavigateTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
