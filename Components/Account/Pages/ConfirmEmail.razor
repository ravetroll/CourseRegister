@page "/Account/ConfirmEmail"

@using System.Text
@using CourseRegisterApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CourseRegisterApp.Data
@using MudBlazor

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-column align-center">
    <MudText Typo="Typo.h4" GutterBottom="true">Confirm Email</MudText>
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <MudAlert Severity="@(statusMessage.StartsWith("Thank") ? Severity.Success : Severity.Error)"
                  Variant="Variant.Filled"
                  Class="mt-4">
            @statusMessage
        </MudAlert>
    }
</MudContainer>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            try
            {
                var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
                var result = await UserManager.ConfirmEmailAsync(user, code);
                statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
            }
            catch (FormatException)
            {
                statusMessage = "Error confirming your email. Invalid code format.";
            }
        }
    }
}