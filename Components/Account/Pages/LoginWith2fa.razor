@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CourseRegisterApp.Data
@using MudBlazor

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Two-factor authentication</MudText>
<MudDivider Class="my-4" />
@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@message</MudAlert>
}

<MudText Class="mb-4">Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>
<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6">
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <MudCard>
                <MudCardContent>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <MudTextField @bind-Value="Input.TwoFactorCode"
                                  For="() => Input.TwoFactorCode"
                                  Label="Authenticator code"
                                  Variant="Variant.Filled"
                                  Name="Input.TwoFactorCode"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  AdornmentColor="Color.Info"
                                  Margin="Margin.Normal" />
                    <MudCheckBox T="bool" @bind-Checked="Input.RememberMachine"
                                 Name="Input.RememberMachine"
                                 Label="Remember this machine"
                                 Color="Color.Primary"
                                 Class="my-4" />
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center pa-4">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true">
                        Log in
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>

<MudText Align="Align.Center" Class="mt-6">
    Don't have access to your authenticator device? You can
    <MudLink Href="@($"Account/LoginWithRecoveryCode?ReturnUrl={ReturnUrl}")">log in with a recovery code</MudLink>.
</MudText>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}